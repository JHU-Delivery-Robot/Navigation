name: Build and Test
on: push
jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v1
      - run: sudo apt-get install -y valgrind
      - run: pip3 install --user gcovr
      - run: pip3 install --user ninja
      - run: pip3 install --user meson
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: get vcpkg version baseline
        id: vcpkg_baseline
        run: |
          JSON=`cat ./vcpkg.json`
          echo "::set-output name=vcpkg_json::${JSON}"
      - name: vcpkg artifact cache
        uses: lukka/run-vcpkg@main
        id: runvcpkg
        with:
          runVcpkgInstall: true
          vcpkgGitCommitId: '${{fromJson(steps.vcpkg_baseline.outputs.vcpkg_json).builtin-baseline}}'
        env:
          VCPKG_INSTALLED_DIR: ${{ github.workspace }}/vcpkg_installed/
      - run: |
          echo "${{ github.workspace }}/vcpkg_installed/${{ env.VCPKG_DEFAULT_TRIPLET }}/lib" >> $GITHUB_PATH
      - run: meson setup build -Db_coverage=true
        env:
          CC: gcc
          CXX: g++
          CMAKE_PREFIX_PATH: '${{ github.workspace }}/vcpkg_installed/${{ env.VCPKG_DEFAULT_TRIPLET }}'
      - run: meson setup build_clang -Db_coverage=true
        env:
          CC: clang
          CXX: clang++
          CMAKE_PREFIX_PATH: '${{ github.workspace }}/vcpkg_installed/${{ env.VCPKG_DEFAULT_TRIPLET }}'
      - run: meson compile -C build
      - run: meson compile -C build_clang
      - run: ./build/test/tests
      - run: ninja coverage-xml -C build # `meson coverage` doesn't work
      - uses: codecov/codecov-action@v2
        with:
          files: ./build/meson-logs/coverage.xml
      - run: valgrind -v --error-exitcode=1 --leak-check=full --show-leak-kinds=all --track-origins=yes ./build/test/tests
