// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: routing.proto

#include "routing.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protocols {
namespace routing {
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR Route::Route(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.waypoints_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteDefaultTypeInternal() {}
  union {
    Route _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteDefaultTypeInternal _Route_default_instance_;
PROTOBUF_CONSTEXPR RobotStatus::RobotStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RobotStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotStatusDefaultTypeInternal() {}
  union {
    RobotStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotStatusDefaultTypeInternal _RobotStatus_default_instance_;
}  // namespace routing
}  // namespace protocols
static ::_pb::Metadata file_level_metadata_routing_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_routing_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_routing_2eproto = nullptr;

const uint32_t TableStruct_routing_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::routing::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::routing::Point, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::protocols::routing::Point, _impl_.latitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::routing::Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::routing::Route, _impl_.waypoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::routing::RobotStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::routing::RobotStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::protocols::routing::RobotStatus, _impl_.location_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protocols::routing::Point)},
  { 8, -1, -1, sizeof(::protocols::routing::Route)},
  { 15, -1, -1, sizeof(::protocols::routing::RobotStatus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protocols::routing::_Point_default_instance_._instance,
  &::protocols::routing::_Route_default_instance_._instance,
  &::protocols::routing::_RobotStatus_default_instance_._instance,
};

const char descriptor_table_protodef_routing_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rrouting.proto\022\021protocols.routing\",\n\005Po"
  "int\022\021\n\tlongitude\030\001 \001(\001\022\020\n\010latitude\030\002 \001(\001"
  "\"4\n\005Route\022+\n\twaypoints\030\001 \003(\0132\030.protocols"
  ".routing.Point\"\215\001\n\013RobotStatus\0225\n\006status"
  "\030\001 \001(\0162%.protocols.routing.RobotStatus.S"
  "tatus\022*\n\010location\030\003 \001(\0132\030.protocols.rout"
  "ing.Point\"\033\n\006Status\022\006\n\002OK\020\000\022\t\n\005ERROR\020\0012Q"
  "\n\007Routing\022F\n\010GetRoute\022\036.protocols.routin"
  "g.RobotStatus\032\030.protocols.routing.Route\""
  "\000B0Z.github.com/JHU-Delivery-Robot/Serve"
  "r/protocolsb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_routing_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_routing_2eproto = {
    false, false, 419, descriptor_table_protodef_routing_2eproto,
    "routing.proto",
    &descriptor_table_routing_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_routing_2eproto::offsets,
    file_level_metadata_routing_2eproto, file_level_enum_descriptors_routing_2eproto,
    file_level_service_descriptors_routing_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_routing_2eproto_getter() {
  return &descriptor_table_routing_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_routing_2eproto(&descriptor_table_routing_2eproto);
namespace protocols {
namespace routing {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotStatus_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_routing_2eproto);
  return file_level_enum_descriptors_routing_2eproto[0];
}
bool RobotStatus_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RobotStatus_Status RobotStatus::OK;
constexpr RobotStatus_Status RobotStatus::ERROR;
constexpr RobotStatus_Status RobotStatus::Status_MIN;
constexpr RobotStatus_Status RobotStatus::Status_MAX;
constexpr int RobotStatus::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocols.routing.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.longitude_){}
    , decltype(_impl_.latitude_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.longitude_, &from._impl_.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.latitude_) -
    reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.latitude_));
  // @@protoc_insertion_point(copy_constructor:protocols.routing.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.longitude_){0}
    , decltype(_impl_.latitude_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:protocols.routing.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.routing.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.latitude_) -
      reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.latitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.routing.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_longitude(), target);
  }

  // double latitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.routing.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.routing.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double longitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }


void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocols.routing.Point)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.routing.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.latitude_)
      + sizeof(Point::_impl_.latitude_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.longitude_)>(
          reinterpret_cast<char*>(&_impl_.longitude_),
          reinterpret_cast<char*>(&other->_impl_.longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_routing_2eproto_getter, &descriptor_table_routing_2eproto_once,
      file_level_metadata_routing_2eproto[0]);
}

// ===================================================================

class Route::_Internal {
 public:
};

Route::Route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocols.routing.Route)
}
Route::Route(const Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Route* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.waypoints_){from._impl_.waypoints_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocols.routing.Route)
}

inline void Route::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.waypoints_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:protocols.routing.Route)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Route::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.waypoints_.~RepeatedPtrField();
}

void Route::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.routing.Route)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.waypoints_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Route::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocols.routing.Point waypoints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_waypoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Route::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.routing.Route)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocols.routing.Point waypoints = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_waypoints_size()); i < n; i++) {
    const auto& repfield = this->_internal_waypoints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.routing.Route)
  return target;
}

size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.routing.Route)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocols.routing.Point waypoints = 1;
  total_size += 1UL * this->_internal_waypoints_size();
  for (const auto& msg : this->_impl_.waypoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Route::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Route::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Route::GetClassData() const { return &_class_data_; }


void Route::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Route*>(&to_msg);
  auto& from = static_cast<const Route&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocols.routing.Route)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.waypoints_.MergeFrom(from._impl_.waypoints_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.routing.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  return true;
}

void Route::InternalSwap(Route* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.waypoints_.InternalSwap(&other->_impl_.waypoints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Route::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_routing_2eproto_getter, &descriptor_table_routing_2eproto_once,
      file_level_metadata_routing_2eproto[1]);
}

// ===================================================================

class RobotStatus::_Internal {
 public:
  static const ::protocols::routing::Point& location(const RobotStatus* msg);
};

const ::protocols::routing::Point&
RobotStatus::_Internal::location(const RobotStatus* msg) {
  return *msg->_impl_.location_;
}
RobotStatus::RobotStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocols.routing.RobotStatus)
}
RobotStatus::RobotStatus(const RobotStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RobotStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::protocols::routing::Point(*from._impl_.location_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:protocols.routing.RobotStatus)
}

inline void RobotStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RobotStatus::~RobotStatus() {
  // @@protoc_insertion_point(destructor:protocols.routing.RobotStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RobotStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void RobotStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RobotStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.routing.RobotStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocols.routing.RobotStatus.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::protocols::routing::RobotStatus_Status>(val));
        } else
          goto handle_unusual;
        continue;
      // .protocols.routing.Point location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RobotStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.routing.RobotStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocols.routing.RobotStatus.Status status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .protocols.routing.Point location = 3;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.routing.RobotStatus)
  return target;
}

size_t RobotStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.routing.RobotStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocols.routing.Point location = 3;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // .protocols.routing.RobotStatus.Status status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RobotStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotStatus::GetClassData() const { return &_class_data_; }


void RobotStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RobotStatus*>(&to_msg);
  auto& from = static_cast<const RobotStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocols.routing.RobotStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::protocols::routing::Point::MergeFrom(
        from._internal_location());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotStatus::CopyFrom(const RobotStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.routing.RobotStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotStatus::IsInitialized() const {
  return true;
}

void RobotStatus::InternalSwap(RobotStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotStatus, _impl_.status_)
      + sizeof(RobotStatus::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(RobotStatus, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_routing_2eproto_getter, &descriptor_table_routing_2eproto_once,
      file_level_metadata_routing_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace routing
}  // namespace protocols
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocols::routing::Point*
Arena::CreateMaybeMessage< ::protocols::routing::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::routing::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::routing::Route*
Arena::CreateMaybeMessage< ::protocols::routing::Route >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::routing::Route >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::routing::RobotStatus*
Arena::CreateMaybeMessage< ::protocols::routing::RobotStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::routing::RobotStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
