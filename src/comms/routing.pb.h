// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: routing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_routing_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_routing_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_routing_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_routing_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_routing_2eproto;
namespace protocols {
namespace routing {
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class RobotStatus;
struct RobotStatusDefaultTypeInternal;
extern RobotStatusDefaultTypeInternal _RobotStatus_default_instance_;
class Route;
struct RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
}  // namespace routing
}  // namespace protocols
PROTOBUF_NAMESPACE_OPEN
template<> ::protocols::routing::Point* Arena::CreateMaybeMessage<::protocols::routing::Point>(Arena*);
template<> ::protocols::routing::RobotStatus* Arena::CreateMaybeMessage<::protocols::routing::RobotStatus>(Arena*);
template<> ::protocols::routing::Route* Arena::CreateMaybeMessage<::protocols::routing::Route>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocols {
namespace routing {

enum RobotStatus_Status : int {
  RobotStatus_Status_OK = 0,
  RobotStatus_Status_ERROR = 1,
  RobotStatus_Status_RobotStatus_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RobotStatus_Status_RobotStatus_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RobotStatus_Status_IsValid(int value);
constexpr RobotStatus_Status RobotStatus_Status_Status_MIN = RobotStatus_Status_OK;
constexpr RobotStatus_Status RobotStatus_Status_Status_MAX = RobotStatus_Status_ERROR;
constexpr int RobotStatus_Status_Status_ARRAYSIZE = RobotStatus_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotStatus_Status_descriptor();
template<typename T>
inline const std::string& RobotStatus_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RobotStatus_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RobotStatus_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RobotStatus_Status_descriptor(), enum_t_value);
}
inline bool RobotStatus_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RobotStatus_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RobotStatus_Status>(
    RobotStatus_Status_descriptor(), name, value);
}
// ===================================================================

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocols.routing.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocols.routing.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
  };
  // double longitude = 1;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:protocols.routing.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double longitude_;
    double latitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_routing_2eproto;
};
// -------------------------------------------------------------------

class Route final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocols.routing.Route) */ {
 public:
  inline Route() : Route(nullptr) {}
  ~Route() override;
  explicit PROTOBUF_CONSTEXPR Route(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Route(const Route& from);
  Route(Route&& from) noexcept
    : Route() {
    *this = ::std::move(from);
  }

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline Route& operator=(Route&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Route& default_instance() {
    return *internal_default_instance();
  }
  static inline const Route* internal_default_instance() {
    return reinterpret_cast<const Route*>(
               &_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Route& a, Route& b) {
    a.Swap(&b);
  }
  inline void Swap(Route* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Route* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Route>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Route& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Route& from) {
    Route::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Route* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocols.routing.Route";
  }
  protected:
  explicit Route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointsFieldNumber = 1,
  };
  // repeated .protocols.routing.Point waypoints = 1;
  int waypoints_size() const;
  private:
  int _internal_waypoints_size() const;
  public:
  void clear_waypoints();
  ::protocols::routing::Point* mutable_waypoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocols::routing::Point >*
      mutable_waypoints();
  private:
  const ::protocols::routing::Point& _internal_waypoints(int index) const;
  ::protocols::routing::Point* _internal_add_waypoints();
  public:
  const ::protocols::routing::Point& waypoints(int index) const;
  ::protocols::routing::Point* add_waypoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocols::routing::Point >&
      waypoints() const;

  // @@protoc_insertion_point(class_scope:protocols.routing.Route)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocols::routing::Point > waypoints_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_routing_2eproto;
};
// -------------------------------------------------------------------

class RobotStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocols.routing.RobotStatus) */ {
 public:
  inline RobotStatus() : RobotStatus(nullptr) {}
  ~RobotStatus() override;
  explicit PROTOBUF_CONSTEXPR RobotStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotStatus(const RobotStatus& from);
  RobotStatus(RobotStatus&& from) noexcept
    : RobotStatus() {
    *this = ::std::move(from);
  }

  inline RobotStatus& operator=(const RobotStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotStatus& operator=(RobotStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotStatus* internal_default_instance() {
    return reinterpret_cast<const RobotStatus*>(
               &_RobotStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RobotStatus& a, RobotStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RobotStatus& from) {
    RobotStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocols.routing.RobotStatus";
  }
  protected:
  explicit RobotStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RobotStatus_Status Status;
  static constexpr Status OK =
    RobotStatus_Status_OK;
  static constexpr Status ERROR =
    RobotStatus_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return RobotStatus_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    RobotStatus_Status_Status_MIN;
  static constexpr Status Status_MAX =
    RobotStatus_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    RobotStatus_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return RobotStatus_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return RobotStatus_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return RobotStatus_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // .protocols.routing.Point location = 3;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::protocols::routing::Point& location() const;
  PROTOBUF_NODISCARD ::protocols::routing::Point* release_location();
  ::protocols::routing::Point* mutable_location();
  void set_allocated_location(::protocols::routing::Point* location);
  private:
  const ::protocols::routing::Point& _internal_location() const;
  ::protocols::routing::Point* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::protocols::routing::Point* location);
  ::protocols::routing::Point* unsafe_arena_release_location();

  // .protocols.routing.RobotStatus.Status status = 1;
  void clear_status();
  ::protocols::routing::RobotStatus_Status status() const;
  void set_status(::protocols::routing::RobotStatus_Status value);
  private:
  ::protocols::routing::RobotStatus_Status _internal_status() const;
  void _internal_set_status(::protocols::routing::RobotStatus_Status value);
  public:

  // @@protoc_insertion_point(class_scope:protocols.routing.RobotStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocols::routing::Point* location_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_routing_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// double longitude = 1;
inline void Point::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double Point::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double Point::longitude() const {
  // @@protoc_insertion_point(field_get:protocols.routing.Point.longitude)
  return _internal_longitude();
}
inline void Point::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void Point::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:protocols.routing.Point.longitude)
}

// double latitude = 2;
inline void Point::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double Point::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double Point::latitude() const {
  // @@protoc_insertion_point(field_get:protocols.routing.Point.latitude)
  return _internal_latitude();
}
inline void Point::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void Point::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:protocols.routing.Point.latitude)
}

// -------------------------------------------------------------------

// Route

// repeated .protocols.routing.Point waypoints = 1;
inline int Route::_internal_waypoints_size() const {
  return _impl_.waypoints_.size();
}
inline int Route::waypoints_size() const {
  return _internal_waypoints_size();
}
inline void Route::clear_waypoints() {
  _impl_.waypoints_.Clear();
}
inline ::protocols::routing::Point* Route::mutable_waypoints(int index) {
  // @@protoc_insertion_point(field_mutable:protocols.routing.Route.waypoints)
  return _impl_.waypoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocols::routing::Point >*
Route::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:protocols.routing.Route.waypoints)
  return &_impl_.waypoints_;
}
inline const ::protocols::routing::Point& Route::_internal_waypoints(int index) const {
  return _impl_.waypoints_.Get(index);
}
inline const ::protocols::routing::Point& Route::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:protocols.routing.Route.waypoints)
  return _internal_waypoints(index);
}
inline ::protocols::routing::Point* Route::_internal_add_waypoints() {
  return _impl_.waypoints_.Add();
}
inline ::protocols::routing::Point* Route::add_waypoints() {
  ::protocols::routing::Point* _add = _internal_add_waypoints();
  // @@protoc_insertion_point(field_add:protocols.routing.Route.waypoints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocols::routing::Point >&
Route::waypoints() const {
  // @@protoc_insertion_point(field_list:protocols.routing.Route.waypoints)
  return _impl_.waypoints_;
}

// -------------------------------------------------------------------

// RobotStatus

// .protocols.routing.RobotStatus.Status status = 1;
inline void RobotStatus::clear_status() {
  _impl_.status_ = 0;
}
inline ::protocols::routing::RobotStatus_Status RobotStatus::_internal_status() const {
  return static_cast< ::protocols::routing::RobotStatus_Status >(_impl_.status_);
}
inline ::protocols::routing::RobotStatus_Status RobotStatus::status() const {
  // @@protoc_insertion_point(field_get:protocols.routing.RobotStatus.status)
  return _internal_status();
}
inline void RobotStatus::_internal_set_status(::protocols::routing::RobotStatus_Status value) {
  
  _impl_.status_ = value;
}
inline void RobotStatus::set_status(::protocols::routing::RobotStatus_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:protocols.routing.RobotStatus.status)
}

// .protocols.routing.Point location = 3;
inline bool RobotStatus::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool RobotStatus::has_location() const {
  return _internal_has_location();
}
inline void RobotStatus::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
inline const ::protocols::routing::Point& RobotStatus::_internal_location() const {
  const ::protocols::routing::Point* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocols::routing::Point&>(
      ::protocols::routing::_Point_default_instance_);
}
inline const ::protocols::routing::Point& RobotStatus::location() const {
  // @@protoc_insertion_point(field_get:protocols.routing.RobotStatus.location)
  return _internal_location();
}
inline void RobotStatus::unsafe_arena_set_allocated_location(
    ::protocols::routing::Point* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.routing.RobotStatus.location)
}
inline ::protocols::routing::Point* RobotStatus::release_location() {
  
  ::protocols::routing::Point* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocols::routing::Point* RobotStatus::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:protocols.routing.RobotStatus.location)
  
  ::protocols::routing::Point* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::protocols::routing::Point* RobotStatus::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocols::routing::Point>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::protocols::routing::Point* RobotStatus::mutable_location() {
  ::protocols::routing::Point* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:protocols.routing.RobotStatus.location)
  return _msg;
}
inline void RobotStatus::set_allocated_location(::protocols::routing::Point* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:protocols.routing.RobotStatus.location)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace protocols

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocols::routing::RobotStatus_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocols::routing::RobotStatus_Status>() {
  return ::protocols::routing::RobotStatus_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_routing_2eproto
